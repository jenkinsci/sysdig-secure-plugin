package com.sysdig.jenkins.plugins.sysdig.uireport;

import com.google.gson.reflect.TypeToken;
import com.sysdig.jenkins.plugins.sysdig.json.GsonBuilder;
import com.sysdig.jenkins.plugins.sysdig.scanner.ImageScanningResult;
import com.sysdig.jenkins.plugins.sysdig.scanner.report.Package;
import hudson.FilePath;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import org.apache.commons.io.IOUtils;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class VulnerabilityReportTest {
  @Test
  public void generateVulnerabilitiesArtifact() throws IOException, InterruptedException {
    // Need getAbsolutePath to fix issue in Windows path starting with a / (like "/C:/..." )
    byte[] data = IOUtils.toByteArray(getClass().getResourceAsStream("vulns1.json"));

    Type listType = new TypeToken<List<Package>>() {
    }.getType();
    List<Package> vulnsReport = GsonBuilder.build().fromJson(new String(data, StandardCharsets.UTF_8), listType);
    File tmp = File.createTempFile("vulnerabilitiesreport", "");
    tmp.deleteOnExit();

    // Given
    ImageScanningResult imageScanningResult = new ImageScanningResult("foo-tag1", "foo-digest1", "pass", vulnsReport, List.of());

    // When
    VulnerabilityReport.processVulnerabilities(imageScanningResult, new FilePath(tmp));

    // Then
    byte[] reportData = Files.readAllBytes(Paths.get(tmp.getAbsolutePath()));
    JSONObject processedReport = (JSONObject) JSONSerializer.toJSON(new String(reportData, StandardCharsets.UTF_8));
    assertEquals("Vulnerability Package", processedReport.getJSONArray("columns").getJSONObject(3).get("title"));
    assertEquals(vulnsReport.get(1).getName().orElseThrow(), processedReport.getJSONArray("data").getJSONArray(0).get(3));
  }

}